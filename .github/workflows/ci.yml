name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, '3.10', 3.11]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-xvfb safety bandit flake8 black isort
        pip install psutil  # For performance tests
    
    - name: Code formatting check (Black)
      run: |
        black --check --diff analytics_dashboard.py run_demo_dashboard.py tests/
    
    - name: Import sorting check (isort)
      run: |
        isort --check-only --diff analytics_dashboard.py run_demo_dashboard.py tests/
    
    - name: Linting (flake8)
      run: |
        flake8 analytics_dashboard.py run_demo_dashboard.py tests/ --max-line-length=100 --ignore=E203,W503
    
    - name: Security check (bandit)
      run: |
        bandit -r . -f json -o bandit-report.json || true
        bandit -r . -ll
    
    - name: Dependency security check (safety)
      run: |
        safety check --json --output safety-report.json || true
        safety check
    
    - name: Run tests with coverage
      run: |
        export DISPLAY=:99
        pytest tests/ -v --cov=analytics_dashboard --cov-report=xml --cov-report=html --cov-report=term-missing --cov-fail-under=80
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false

    - name: Performance benchmarks
      run: |
        python -m pytest tests/test_performance.py -v -s
    
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-${{ matrix.python-version }}
        path: |
          htmlcov/
          coverage.xml
          bandit-report.json
          safety-report.json

  security-scan:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Build Docker image
      run: |
        docker build -t ai-pipeline-analytics:latest .
    
    - name: Test Docker image
      run: |
        docker run --rm ai-pipeline-analytics:latest python -c "import analytics_dashboard; print('Import successful')"

  deploy-staging:
    runs-on: ubuntu-latest
    needs: [test, security-scan, docker-build]
    if: github.ref == 'refs/heads/develop'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add staging deployment commands here
        
  deploy-production:
    runs-on: ubuntu-latest
    needs: [test, security-scan, docker-build]
    if: github.ref == 'refs/heads/main'
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add production deployment commands here

  documentation:
    runs-on: ubuntu-latest
    needs: test
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
    
    - name: Install documentation dependencies
      run: |
        pip install sphinx sphinx-rtd-theme
    
    - name: Generate API documentation
      run: |
        sphinx-apidoc -o docs/api .
        sphinx-build -b html docs docs/_build/html
    
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: docs/_build/html/ 